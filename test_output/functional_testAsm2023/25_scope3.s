.arch armv7-a
.fpu vfpv3-d16
.arm
.data
.text
.global main
main:@r6 r7 r8 
	push {fp,lr}
	push {r6,r7,r8}
	add fp,sp,#4
	sub sp,sp,#40
.mainL0:
.mainL1:
	mov r8,#97
	@call void @putch(i32 %r0)
	sub sp,sp,#4 @stack align 8bytes
	mov r0,r8
	bl putch
	add sp,sp,#4 @stack align 8bytes
	mov r8,#10
	@call void @putch(i32 %r1)
	sub sp,sp,#4 @stack align 8bytes
	mov r0,r8
	bl putch
	add sp,sp,#4 @stack align 8bytes
	mov r8,#1
	str r8,[fp,#-40]
	mov r8,#0
	str r8,[fp,#-36]
	ldr r8,[fp,#-40]
	mov r7,#2
	add r6,r8,r7
	str r6,[fp,#-40]
	ldr r8,[fp,#-40]
	mov r7,#3
	add r6,r8,r7
	str r6,[fp,#-32]
	ldr r8,[fp,#-32]
	mov r7,#4
	add r6,r8,r7
	str r6,[fp,#-32]
	ldr r8,[fp,#-36]
	ldr r7,[fp,#-40]
	add r6,r8,r7
	ldr r8,[fp,#-32]
	add r7,r6,r8
	str r7,[fp,#-36]
	ldr r8,[fp,#-32]
	mov r7,#5
	add r6,r8,r7
	str r6,[fp,#-32]
	ldr r8,[fp,#-32]
	mov r7,#6
	add r6,r8,r7
	str r6,[fp,#-28]
	ldr r8,[fp,#-40]
	ldr r7,[fp,#-28]
	add r6,r8,r7
	str r6,[fp,#-40]
	ldr r8,[fp,#-36]
	ldr r7,[fp,#-40]
	add r6,r8,r7
	ldr r8,[fp,#-32]
	add r7,r6,r8
	ldr r8,[fp,#-28]
	add r6,r7,r8
	str r6,[fp,#-36]
	ldr r8,[fp,#-32]
	ldr r7,[fp,#-40]
	add r6,r8,r7
	str r6,[fp,#-32]
	ldr r8,[fp,#-28]
	mov r7,#7
	add r6,r8,r7
	str r6,[fp,#-24]
	ldr r8,[fp,#-24]
	mov r7,#8
	add r6,r8,r7
	str r6,[fp,#-24]
	ldr r8,[fp,#-36]
	ldr r7,[fp,#-24]
	add r6,r8,r7
	ldr r8,[fp,#-32]
	add r7,r6,r8
	ldr r8,[fp,#-28]
	add r6,r7,r8
	str r6,[fp,#-36]
	ldr r8,[fp,#-32]
	ldr r7,[fp,#-24]
	add r6,r8,r7
	str r6,[fp,#-32]
	ldr r8,[fp,#-28]
	mov r7,#9
	add r6,r8,r7
	str r6,[fp,#-20]
	ldr r8,[fp,#-24]
	mov r7,#10
	add r6,r8,r7
	str r6,[fp,#-24]
	mov r8,#11
	str r8,[fp,#-16]
	ldr r8,[fp,#-20]
	mov r7,#12
	add r6,r8,r7
	str r6,[fp,#-20]
	ldr r8,[fp,#-36]
	ldr r7,[fp,#-16]
	add r6,r8,r7
	ldr r8,[fp,#-20]
	add r7,r6,r8
	ldr r8,[fp,#-28]
	add r6,r7,r8
	str r6,[fp,#-36]
	ldr r8,[fp,#-28]
	ldr r7,[fp,#-20]
	add r6,r8,r7
	str r6,[fp,#-28]
	ldr r8,[fp,#-20]
	mov r7,#13
	add r6,r8,r7
	str r6,[fp,#-12]
	ldr r8,[fp,#-12]
	ldr r7,[fp,#-16]
	add r6,r8,r7
	str r6,[fp,#-12]
	ldr r8,[fp,#-36]
	ldr r7,[fp,#-16]
	add r6,r8,r7
	ldr r8,[fp,#-20]
	add r7,r6,r8
	ldr r8,[fp,#-12]
	add r6,r7,r8
	str r6,[fp,#-36]
	ldr r8,[fp,#-36]
	ldr r7,[fp,#-28]
	sub r6,r8,r7
	str r6,[fp,#-36]
	ldr r8,[fp,#-36]
	ldr r7,[fp,#-32]
	sub r6,r8,r7
	str r6,[fp,#-36]
	ldr r8,[fp,#-36]
	ldr r7,[fp,#-40]
	sub r6,r8,r7
	str r6,[fp,#-36]
	ldr r8,[fp,#-36]
	mov r7,#77
	@%r105 = call i32 @__modsi3(i32 %r103,i32 %r104)
	sub sp,sp,#4 @stack align 8bytes
	mov r0,r8
	mov r1,r7
	bl __modsi3
	mov r6,r0
	add sp,sp,#4 @stack align 8bytes
	mov r0,r6
	add sp,sp,#40
	pop {r6,r7,r8}
	pop {fp,pc}
	.section	.note.GNU-stack,"",%progbits
