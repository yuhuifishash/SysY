const int N = 1010, M = 5010;
int head[N], ver[M * 2], Next[M * 2];
int dfn[N], low[N], stack[N];
int n, m, tot = 1, num, root, top, cnt;
int dcc_sz[N];
int dcc[N][N * 2];
int min(int a,int b){
    if(a<b){
        return a;
    }
    return b;
}
void add(int x, int y) {
    tot+=1;
	ver[tot] = y; Next[tot] = head[x]; head[x] = tot;
}
void tarjan(int x) {
    num += 1;
	dfn[x] = num; low[x] = num;
    top = top + 1;
	stack[top] = x;
	if (x == root && head[x] == 0) {
        cnt = cnt + 1;
        dcc_sz[cnt] += 1;
		dcc[cnt][dcc_sz[cnt]] = x;
		return;
	}
	int flag = 0;
	@for (int i = head[x]; i; i = Next[i]) {
		int y = ver[i];
		if (!dfn[y]) {
			tarjan(y);
			low[x] = min(low[x], low[y]);
			if (low[y] >= dfn[x]) {
				flag+=1;
                if (x != root || flag > 1){}
				cnt+=1;
				int z = -1;
				while(z != y) {
					z = stack[top];
                    top=top-1;
                    dcc_sz[cnt] += 1;
					dcc[cnt][dcc_sz[cnt]] = z;
				}

                dcc_sz[cnt] += 1;
				dcc[cnt][dcc_sz[cnt]] = x;
			}
		} 
		else
			low[x] = min(low[x], dfn[y]);
	}
}
int main() {
    n = getint();
    m = getint();
	@for (int i = 1; i <= m; i=i+1) {
		int x=getint(), y=getint();
		if (x == y)
			continue;
		add(x, y); add(y, x);
	}
	@for (int i = 1; i <= n; i=i+1)
		if (!dfn[i]){
			root = i; tarjan(i);}
	putf("%d\n",cnt);
	@for (int i = 1; i <= cnt; i=i+1) {
        putint(dcc_sz[i]);
		@for (int j = 1; j <= dcc_sz[i]; j=j+1)
			putf(" %d",dcc[i][j]);
		putf("\n");
	}
	return 0;
}