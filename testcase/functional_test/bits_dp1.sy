int p2[31]={};

// all the numbers are unsigned int
int shl(int a,int bits){
    return a*p2[bits];
}
int shr(int a,int bits){
    return a/p2[bits];
}

int or(int a,int b){
    int a_bits[32]={}, b_bits[32]={};
    int i = 0;
    while(a){
        a_bits[i] = a%2;
        a = a/2;
        i = i + 1;
    }

    i = 0;
    while(b){
        b_bits[i] = b%2;
        b = b/2;
        i = i + 1;
    }

    int ans = 0;
    i = 0;
    while(i < 30){
        if(a_bits[i] == 1 || b_bits[i] == 1){
            ans = ans + p2[i];
        }
        i = i + 1;
    }
    return ans;
}

int and(int a,int b){
    int a_bits[32]={}, b_bits[32]={};
    int i = 0;
    while(a){
        a_bits[i] = a%2;
        a = a/2;
        i = i + 1;
    }

    i = 0;
    while(b){
        b_bits[i] = b%2;
        b = b/2;
        i = i + 1;
    }

    int ans = 0;
    i = 0;
    while(i < 30){
        if(a_bits[i] == 1 && b_bits[i] == 1){
            ans = ans + p2[i];
        }
        i = i + 1;
    }
    return ans;
}

int xor(int a,int b){
    int a_bits[32]={}, b_bits[32]={};
    int i = 0;
    while(a){
        a_bits[i] = a%2;
        a = a/2;
        i = i + 1;
    }

    i = 0;
    while(b){
        b_bits[i] = b%2;
        b = b/2;
        i = i + 1;
    }

    int ans = 0;
    i = 0;
    while(i < 30){
        if(a_bits[i] + b_bits[i] == 1){
            ans = ans + p2[i];
        }
        i = i + 1;
    }
    return ans;
}
float min(float a,float b)
{
    if(a < b){
        return a;
    }
    return b;
}

float my_sqrt(float n)
{
    float x = n;
    float last;
    if(x < 0.0001 && x > -0.0001){
        return 0;
    }
    int i = 0;
    while(i < 20){
        last = x;
        x = (x + n/x)/2;
        i = i+1;
    }
    return x;
}


int n=0;
float x[20]={},y[20]={};
float D[20][20]={};
float dp[20][35000]={};
float dis(int i,int j)
{
	float d1=x[i]-x[j];
	float d2=y[i]-y[j];
	return my_sqrt(d1*d1+d2*d2);
}
void init()
{
	n = getint();
	@for(int i=1;i<=n;i=i+1){
        x[i] = getint();
        y[i] = getint();
	}
	@for(int i=0;i<=n;i=i+1){
		@for(int j=0;j<=n;j=j+1){
			D[i][j]=dis(i,j);
		}
	}
    @for(int i=0;i<20;i=i+1){
        @for(int j=0;j<35000;j=j+1){
            dp[i][j] = p2[25];
        }
    }
	@for(int i=1;i<=n;i=i+1){
		dp[i][shl(1,(i-1))]=D[i][0];
	}
}
float solve()
{
	init();
	float ans=dp[0][0];
	@for(int k=1;k<shl(1,n);k=k+1){
		@for(int i=1;i<=n;i=i+1){
			if((and(k,shl(1,(i-1))))==0){
				continue;
			}
			@for(int j=1;j<=n;j=j+1){
				if(i==j){
					continue;
				}
				if((and(k,shl(1,(j-1))))==0){
					continue;
				}
				dp[i][k]=min(dp[i][k],dp[j][k-shl(1,(i-1))]+D[i][j]);
			}
		}
	}
	@for(int i=1;i<=n;i=i+1){
		ans=min(ans,dp[i][shl(1,n)-1]);
	}
	return ans;
}
int main()
{
    p2[0] = 1;
    int i = 1;
    while(i<31){
        p2[i] = p2[i-1]*2;
        i = i + 1;
    }
	putf("%.2f",solve());
	return 0;
}